"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[766],{4436:function(t,e,r){r.d(e,{ew:function(){return ve},nh:function(){return A},yc:function(){return J},YW:function(){return N},Wf:function(){return Oe}});var s=r(4942),n=r(780),i=r.n(n),o=r(8764),a=r(3550),c=r.n(a),u=r(7191),l=r.n(u),h=r(9266),d=r(5532),g=r(9386),p=r(3471),b=r(3937),f=r(1198),m=r.n(f),y=r(7221),k=r.n(y),w=r(1094);const S=t=>o.Buffer.isBuffer(t)?t:t instanceof Uint8Array?o.Buffer.from(t.buffer,t.byteOffset,t.byteLength):o.Buffer.from(t);class _{constructor(t){Object.assign(this,t)}encode(){return o.Buffer.from((0,d.serialize)(I,this))}static decode(t){return(0,d.deserialize)(I,this,t)}static decodeUnchecked(t){return(0,d.deserializeUnchecked)(I,this,t)}}const I=new Map;class A extends _{constructor(t){if(super({}),(0,s.Z)(this,"_bn",void 0),function(t){return void 0!==t._bn}(t))this._bn=t._bn;else{if("string"===typeof t){const e=l().decode(t);if(32!=e.length)throw new Error("Invalid public key input");this._bn=new(c())(e)}else this._bn=new(c())(t);if(this._bn.byteLength()>32)throw new Error("Invalid public key input")}}equals(t){return this._bn.eq(t._bn)}toBase58(){return l().encode(this.toBytes())}toBytes(){return this.toBuffer()}toBuffer(){const t=this._bn.toArrayLike(o.Buffer);if(32===t.length)return t;const e=o.Buffer.alloc(32);return t.copy(e,32-t.length),e}toString(){return this.toBase58()}static async createWithSeed(t,e,r){const s=o.Buffer.concat([t.toBuffer(),o.Buffer.from(e),r.toBuffer()]),n=await(0,h.JQ)(new Uint8Array(s));return new A(o.Buffer.from(n,"hex"))}static async createProgramAddress(t,e){let r=o.Buffer.alloc(0);t.forEach((function(t){if(t.length>32)throw new TypeError("Max seed length exceeded");r=o.Buffer.concat([r,S(t)])})),r=o.Buffer.concat([r,e.toBuffer(),o.Buffer.from("ProgramDerivedAddress")]);let s=await(0,h.JQ)(new Uint8Array(r)),n=new(c())(s,16).toArray(void 0,32);if(R(n))throw new Error("Invalid seeds, address must fall off the curve");return new A(n)}static async findProgramAddress(t,e){let r,s=255;for(;0!=s;){try{const n=t.concat(o.Buffer.from([s]));r=await this.createProgramAddress(n,e)}catch(n){if(n instanceof TypeError)throw n;s--;continue}return[r,s]}throw new Error("Unable to find a viable program address nonce")}static isOnCurve(t){return 1==R(t)}}(0,s.Z)(A,"default",new A("11111111111111111111111111111111")),I.set(A,{kind:"struct",fields:[["_bn","u256"]]});let x=i().lowlevel;function R(t){var e=[x.gf(),x.gf(),x.gf(),x.gf()],r=x.gf(),s=x.gf(),n=x.gf(),i=x.gf(),o=x.gf(),a=x.gf(),c=x.gf();return x.set25519(e[2],B),x.unpack25519(e[1],t),x.S(n,e[1]),x.M(i,n,x.D),x.Z(n,n,e[2]),x.A(i,e[2],i),x.S(o,i),x.S(a,o),x.M(c,a,o),x.M(r,c,n),x.M(r,r,i),x.pow2523(r,r),x.M(r,r,n),x.M(r,r,i),x.M(r,r,i),x.M(e[0],r,i),x.S(s,e[0]),x.M(s,s,i),E(s,n)&&x.M(e[0],e[0],v),x.S(s,e[0]),x.M(s,s,i),E(s,n)?0:1}let B=x.gf([1]),v=x.gf([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function E(t,e){var r=new Uint8Array(32),s=new Uint8Array(32);return x.pack25519(r,t),x.pack25519(s,e),x.crypto_verify_32(r,0,s,0)}new A("BPFLoader1111111111111111111111111111111111");const P=(t="publicKey")=>g.blob(32,t),W=(t="string")=>{const e=g.struct([g.u32("length"),g.u32("lengthPadding"),g.blob(g.offset(g.u32(),-8),"chars")],t),r=e.decode.bind(e),s=e.encode.bind(e);return e.decode=(t,e)=>r(t,e).chars.toString("utf8"),e.encode=(t,e,r)=>{const n={chars:o.Buffer.from(t,"utf8")};return s(n,e,r)},e.alloc=t=>g.u32().span+g.u32().span+o.Buffer.from(t,"utf8").length,e};function C(t){let e=0,r=0;for(;;){let s=t.shift();if(e|=(127&s)<<7*r,r+=1,0===(128&s))break}return e}function Z(t,e){let r=e;for(;;){let e=127&r;if(r>>=7,0==r){t.push(e);break}e|=128,t.push(e)}}class U{constructor(t){(0,s.Z)(this,"header",void 0),(0,s.Z)(this,"accountKeys",void 0),(0,s.Z)(this,"recentBlockhash",void 0),(0,s.Z)(this,"instructions",void 0),this.header=t.header,this.accountKeys=t.accountKeys.map((t=>new A(t))),this.recentBlockhash=t.recentBlockhash,this.instructions=t.instructions}isAccountWritable(t){return t<this.header.numRequiredSignatures-this.header.numReadonlySignedAccounts||t>=this.header.numRequiredSignatures&&t<this.accountKeys.length-this.header.numReadonlyUnsignedAccounts}serialize(){const t=this.accountKeys.length;let e=[];Z(e,t);const r=this.instructions.map((t=>{const{accounts:e,programIdIndex:r}=t,s=l().decode(t.data);let n=[];Z(n,e.length);let i=[];return Z(i,s.length),{programIdIndex:r,keyIndicesCount:o.Buffer.from(n),keyIndices:o.Buffer.from(e),dataLength:o.Buffer.from(i),data:s}}));let s=[];Z(s,r.length);let n=o.Buffer.alloc(q);o.Buffer.from(s).copy(n);let i=s.length;r.forEach((t=>{const e=g.struct([g.u8("programIdIndex"),g.blob(t.keyIndicesCount.length,"keyIndicesCount"),g.seq(g.u8("keyIndex"),t.keyIndices.length,"keyIndices"),g.blob(t.dataLength.length,"dataLength"),g.seq(g.u8("userdatum"),t.data.length,"data")]).encode(t,n,i);i+=e})),n=n.slice(0,i);const a=g.struct([g.blob(1,"numRequiredSignatures"),g.blob(1,"numReadonlySignedAccounts"),g.blob(1,"numReadonlyUnsignedAccounts"),g.blob(e.length,"keyCount"),g.seq(P("key"),t,"keys"),P("recentBlockhash")]),c={numRequiredSignatures:o.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:o.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:o.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:o.Buffer.from(e),keys:this.accountKeys.map((t=>S(t.toBytes()))),recentBlockhash:l().decode(this.recentBlockhash)};let u=o.Buffer.alloc(2048);const h=a.encode(c,u);return n.copy(u,h),u.slice(0,h+n.length)}static from(t){let e=[...t];const r=e.shift(),s=e.shift(),n=e.shift(),i=C(e);let a=[];for(let g=0;g<i;g++){const t=e.slice(0,32);e=e.slice(32),a.push(l().encode(o.Buffer.from(t)))}const c=e.slice(0,32);e=e.slice(32);const u=C(e);let h=[];for(let g=0;g<u;g++){const t=e.shift(),r=C(e),s=e.slice(0,r);e=e.slice(r);const n=C(e),i=e.slice(0,n),a=l().encode(o.Buffer.from(i));e=e.slice(n),h.push({programIdIndex:t,accounts:s,data:a})}const d={header:{numRequiredSignatures:r,numReadonlySignedAccounts:s,numReadonlyUnsignedAccounts:n},recentBlockhash:l().encode(o.Buffer.from(c)),accountKeys:a,instructions:h};return new U(d)}}function T(t,e){if(!t)throw new Error(e||"Assertion failed")}const z=o.Buffer.alloc(64).fill(0),q=1232;class O{constructor(t){(0,s.Z)(this,"keys",void 0),(0,s.Z)(this,"programId",void 0),(0,s.Z)(this,"data",o.Buffer.alloc(0)),this.programId=t.programId,this.keys=t.keys,t.data&&(this.data=t.data)}}class N{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(t){(0,s.Z)(this,"signatures",[]),(0,s.Z)(this,"feePayer",void 0),(0,s.Z)(this,"instructions",[]),(0,s.Z)(this,"recentBlockhash",void 0),(0,s.Z)(this,"nonceInfo",void 0),t&&Object.assign(this,t)}add(...t){if(0===t.length)throw new Error("No instructions");return t.forEach((t=>{"instructions"in t?this.instructions=this.instructions.concat(t.instructions):"data"in t&&"programId"in t&&"keys"in t?this.instructions.push(t):this.instructions.push(new O(t))})),this}compileMessage(){const{nonceInfo:t}=this;t&&this.instructions[0]!=t.nonceInstruction&&(this.recentBlockhash=t.nonce,this.instructions.unshift(t.nonceInstruction));const{recentBlockhash:e}=this;if(!e)throw new Error("Transaction recentBlockhash required");let r;if(this.instructions.length<1&&console.warn("No instructions provided"),this.feePayer)r=this.feePayer;else{if(!(this.signatures.length>0&&this.signatures[0].publicKey))throw new Error("Transaction fee payer required");r=this.signatures[0].publicKey}for(let l=0;l<this.instructions.length;l++)if(void 0===this.instructions[l].programId)throw new Error(`Transaction instruction index ${l} has undefined program id`);const s=[],n=[];this.instructions.forEach((t=>{t.keys.forEach((t=>{n.push({...t})}));const e=t.programId.toString();s.includes(e)||s.push(e)})),s.forEach((t=>{n.push({pubkey:new A(t),isSigner:!1,isWritable:!1})})),n.sort((function(t,e){const r=t.isSigner===e.isSigner?0:t.isSigner?-1:1,s=t.isWritable===e.isWritable?0:t.isWritable?-1:1;return r||s}));const i=[];n.forEach((t=>{const e=t.pubkey.toString(),r=i.findIndex((t=>t.pubkey.toString()===e));r>-1?i[r].isWritable=i[r].isWritable||t.isWritable:i.push(t)}));const o=i.findIndex((t=>t.pubkey.equals(r)));if(o>-1){const[t]=i.splice(o,1);t.isSigner=!0,t.isWritable=!0,i.unshift(t)}else i.unshift({pubkey:r,isSigner:!0,isWritable:!0});for(const l of this.signatures){const t=i.findIndex((t=>t.pubkey.equals(l.publicKey)));if(!(t>-1))throw new Error(`unknown signer: ${l.publicKey.toString()}`);i[t].isSigner||(i[t].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."))}let a=0,c=0,u=0;const h=[],d=[];i.forEach((({pubkey:t,isSigner:e,isWritable:r})=>{e?(h.push(t.toString()),a+=1,r||(c+=1)):(d.push(t.toString()),r||(u+=1))}));const g=h.concat(d),p=this.instructions.map((t=>{const{data:e,programId:r}=t;return{programIdIndex:g.indexOf(r.toString()),accounts:t.keys.map((t=>g.indexOf(t.pubkey.toString()))),data:l().encode(e)}}));return p.forEach((t=>{T(t.programIdIndex>=0),t.accounts.forEach((t=>T(t>=0)))})),new U({header:{numRequiredSignatures:a,numReadonlySignedAccounts:c,numReadonlyUnsignedAccounts:u},accountKeys:g,recentBlockhash:e,instructions:p})}_compile(){const t=this.compileMessage(),e=t.accountKeys.slice(0,t.header.numRequiredSignatures);if(this.signatures.length===e.length){if(this.signatures.every(((t,r)=>e[r].equals(t.publicKey))))return t}return this.signatures=e.map((t=>({signature:null,publicKey:t}))),t}serializeMessage(){return this._compile().serialize()}setSigners(...t){if(0===t.length)throw new Error("No signers");const e=new Set;this.signatures=t.filter((t=>{const r=t.toString();return!e.has(r)&&(e.add(r),!0)})).map((t=>({signature:null,publicKey:t})))}sign(...t){if(0===t.length)throw new Error("No signers");const e=new Set,r=[];for(const n of t){const t=n.publicKey.toString();e.has(t)||(e.add(t),r.push(n))}this.signatures=r.map((t=>({signature:null,publicKey:t.publicKey})));const s=this._compile();this._partialSign(s,...r),this._verifySignatures(s.serialize(),!0)}partialSign(...t){if(0===t.length)throw new Error("No signers");const e=new Set,r=[];for(const n of t){const t=n.publicKey.toString();e.has(t)||(e.add(t),r.push(n))}const s=this._compile();this._partialSign(s,...r)}_partialSign(t,...e){const r=t.serialize();e.forEach((t=>{const e=i().sign.detached(r,t.secretKey);this._addSignature(t.publicKey,S(e))}))}addSignature(t,e){this._compile(),this._addSignature(t,e)}_addSignature(t,e){T(64===e.length);const r=this.signatures.findIndex((e=>t.equals(e.publicKey)));if(r<0)throw new Error(`unknown signer: ${t.toString()}`);this.signatures[r].signature=o.Buffer.from(e)}verifySignatures(){return this._verifySignatures(this.serializeMessage(),!0)}_verifySignatures(t,e){for(const{signature:r,publicKey:s}of this.signatures)if(null===r){if(e)return!1}else if(!i().sign.detached.verify(t,r,s.toBuffer()))return!1;return!0}serialize(t){const{requireAllSignatures:e,verifySignatures:r}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},t),s=this.serializeMessage();if(r&&!this._verifySignatures(s,e))throw new Error("Signature verification failed");return this._serialize(s)}_serialize(t){const{signatures:e}=this,r=[];Z(r,e.length);const s=r.length+64*e.length+t.length,n=o.Buffer.alloc(s);return T(e.length<256),o.Buffer.from(r).copy(n,0),e.forEach((({signature:t},e)=>{null!==t&&(T(64===t.length,"signature has invalid length"),o.Buffer.from(t).copy(n,r.length+64*e))})),t.copy(n,r.length+64*e.length),T(n.length<=q,`Transaction too large: ${n.length} > ${q}`),n}get keys(){return T(1===this.instructions.length),this.instructions[0].keys.map((t=>t.pubkey))}get programId(){return T(1===this.instructions.length),this.instructions[0].programId}get data(){return T(1===this.instructions.length),this.instructions[0].data}static from(t){let e=[...t];const r=C(e);let s=[];for(let n=0;n<r;n++){const t=e.slice(0,64);e=e.slice(64),s.push(l().encode(o.Buffer.from(t)))}return N.populate(U.from(e),s)}static populate(t,e){const r=new N;return r.recentBlockhash=t.recentBlockhash,t.header.numRequiredSignatures>0&&(r.feePayer=t.accountKeys[0]),e.forEach(((e,s)=>{const n={signature:e==l().encode(z)?null:l().decode(e),publicKey:t.accountKeys[s]};r.signatures.push(n)})),t.instructions.forEach((e=>{const s=e.accounts.map((e=>{const s=t.accountKeys[e];return{pubkey:s,isSigner:r.signatures.some((t=>t.publicKey.toString()===s.toString())),isWritable:t.isAccountWritable(e)}}));r.instructions.push(new O({keys:s,programId:t.accountKeys[e.programIdIndex],data:l().decode(e.data)}))})),r}}const j=new A("SysvarC1ock11111111111111111111111111111111"),G=new A("SysvarRecentB1ockHashes11111111111111111111"),K=new A("SysvarRent111111111111111111111111111111111"),X=(new A("SysvarRewards111111111111111111111111111111"),new A("SysvarStakeHistory1111111111111111111111111"));new A("Sysvar1nstructions1111111111111111111111111");async function L(t,e,r,s){const n=s&&{skipPreflight:s.skipPreflight,preflightCommitment:s.preflightCommitment||s.commitment},i=await t.sendTransaction(e,r,n),o=(await t.confirmTransaction(i,s&&s.commitment)).value;if(o.err)throw new Error(`Transaction ${i} failed (${JSON.stringify(o)})`);return i}function M(t){return new Promise((e=>setTimeout(e,t)))}function $(t,e){const r=t.layout.span>=0?t.layout.span:function(t,e){let r=0;return t.layout.fields.forEach((t=>{t.span>=0?r+=t.span:"function"===typeof t.alloc&&(r+=t.alloc(e[t.property]))})),r}(t,e),s=o.Buffer.alloc(r),n=Object.assign({instruction:t.index},e);return t.layout.encode(n,s),s}const F=g.nu64("lamportsPerSignature"),D=g.struct([g.u32("version"),g.u32("state"),P("authorizedPubkey"),P("nonce"),g.struct([F],"feeCalculator")]),H=D.span;class V{constructor(t){(0,s.Z)(this,"authorizedPubkey",void 0),(0,s.Z)(this,"nonce",void 0),(0,s.Z)(this,"feeCalculator",void 0),this.authorizedPubkey=t.authorizedPubkey,this.nonce=t.nonce,this.feeCalculator=t.feeCalculator}static fromAccountData(t){const e=D.decode(S(t),0);return new V({authorizedPubkey:new A(e.authorizedPubkey),nonce:new A(e.nonce).toString(),feeCalculator:e.feeCalculator})}}const Q=Object.freeze({Create:{index:0,layout:g.struct([g.u32("instruction"),g.ns64("lamports"),g.ns64("space"),P("programId")])},Assign:{index:1,layout:g.struct([g.u32("instruction"),P("programId")])},Transfer:{index:2,layout:g.struct([g.u32("instruction"),g.ns64("lamports")])},CreateWithSeed:{index:3,layout:g.struct([g.u32("instruction"),P("base"),W("seed"),g.ns64("lamports"),g.ns64("space"),P("programId")])},AdvanceNonceAccount:{index:4,layout:g.struct([g.u32("instruction")])},WithdrawNonceAccount:{index:5,layout:g.struct([g.u32("instruction"),g.ns64("lamports")])},InitializeNonceAccount:{index:6,layout:g.struct([g.u32("instruction"),P("authorized")])},AuthorizeNonceAccount:{index:7,layout:g.struct([g.u32("instruction"),P("authorized")])},Allocate:{index:8,layout:g.struct([g.u32("instruction"),g.ns64("space")])},AllocateWithSeed:{index:9,layout:g.struct([g.u32("instruction"),P("base"),W("seed"),g.ns64("space"),P("programId")])},AssignWithSeed:{index:10,layout:g.struct([g.u32("instruction"),P("base"),W("seed"),P("programId")])},TransferWithSeed:{index:11,layout:g.struct([g.u32("instruction"),g.ns64("lamports"),W("seed"),P("programId")])}});class J{constructor(){}static createAccount(t){const e=$(Q.Create,{lamports:t.lamports,space:t.space,programId:S(t.programId.toBuffer())});return new O({keys:[{pubkey:t.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:t.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data:e})}static transfer(t){let e,r;if("basePubkey"in t){e=$(Q.TransferWithSeed,{lamports:t.lamports,seed:t.seed,programId:S(t.programId.toBuffer())}),r=[{pubkey:t.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:t.basePubkey,isSigner:!0,isWritable:!1},{pubkey:t.toPubkey,isSigner:!1,isWritable:!0}]}else{e=$(Q.Transfer,{lamports:t.lamports}),r=[{pubkey:t.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:t.toPubkey,isSigner:!1,isWritable:!0}]}return new O({keys:r,programId:this.programId,data:e})}static assign(t){let e,r;if("basePubkey"in t){e=$(Q.AssignWithSeed,{base:S(t.basePubkey.toBuffer()),seed:t.seed,programId:S(t.programId.toBuffer())}),r=[{pubkey:t.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:t.basePubkey,isSigner:!0,isWritable:!1}]}else{e=$(Q.Assign,{programId:S(t.programId.toBuffer())}),r=[{pubkey:t.accountPubkey,isSigner:!0,isWritable:!0}]}return new O({keys:r,programId:this.programId,data:e})}static createAccountWithSeed(t){const e=$(Q.CreateWithSeed,{base:S(t.basePubkey.toBuffer()),seed:t.seed,lamports:t.lamports,space:t.space,programId:S(t.programId.toBuffer())});let r=[{pubkey:t.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:t.newAccountPubkey,isSigner:!1,isWritable:!0}];return t.basePubkey!=t.fromPubkey&&r.push({pubkey:t.basePubkey,isSigner:!0,isWritable:!1}),new O({keys:r,programId:this.programId,data:e})}static createNonceAccount(t){const e=new N;"basePubkey"in t&&"seed"in t?e.add(J.createAccountWithSeed({fromPubkey:t.fromPubkey,newAccountPubkey:t.noncePubkey,basePubkey:t.basePubkey,seed:t.seed,lamports:t.lamports,space:H,programId:this.programId})):e.add(J.createAccount({fromPubkey:t.fromPubkey,newAccountPubkey:t.noncePubkey,lamports:t.lamports,space:H,programId:this.programId}));const r={noncePubkey:t.noncePubkey,authorizedPubkey:t.authorizedPubkey};return e.add(this.nonceInitialize(r)),e}static nonceInitialize(t){const e=$(Q.InitializeNonceAccount,{authorized:S(t.authorizedPubkey.toBuffer())}),r={keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:G,isSigner:!1,isWritable:!1},{pubkey:K,isSigner:!1,isWritable:!1}],programId:this.programId,data:e};return new O(r)}static nonceAdvance(t){const e=$(Q.AdvanceNonceAccount),r={keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:G,isSigner:!1,isWritable:!1},{pubkey:t.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:e};return new O(r)}static nonceWithdraw(t){const e=$(Q.WithdrawNonceAccount,{lamports:t.lamports});return new O({keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:t.toPubkey,isSigner:!1,isWritable:!0},{pubkey:G,isSigner:!1,isWritable:!1},{pubkey:K,isSigner:!1,isWritable:!1},{pubkey:t.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:e})}static nonceAuthorize(t){const e=$(Q.AuthorizeNonceAccount,{authorized:S(t.newAuthorizedPubkey.toBuffer())});return new O({keys:[{pubkey:t.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:t.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data:e})}static allocate(t){let e,r;if("basePubkey"in t){e=$(Q.AllocateWithSeed,{base:S(t.basePubkey.toBuffer()),seed:t.seed,space:t.space,programId:S(t.programId.toBuffer())}),r=[{pubkey:t.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:t.basePubkey,isSigner:!0,isWritable:!1}]}else{e=$(Q.Allocate,{space:t.space}),r=[{pubkey:t.accountPubkey,isSigner:!0,isWritable:!0}]}return new O({keys:r,programId:this.programId,data:e})}}(0,s.Z)(J,"programId",new A("11111111111111111111111111111111"));const Y=q-300;class tt{constructor(){}static getMinNumSignatures(t){return 2*(Math.ceil(t/tt.chunkSize)+1+1)}static async load(t,e,r,s,n){{const i=await t.getMinimumBalanceForRentExemption(n.length),o=await t.getAccountInfo(r.publicKey,"confirmed");let a=null;if(null!==o){if(o.executable)return console.error("Program load failed, account is already executable"),!1;o.data.length!==n.length&&(a=a||new N,a.add(J.allocate({accountPubkey:r.publicKey,space:n.length}))),o.owner.equals(s)||(a=a||new N,a.add(J.assign({accountPubkey:r.publicKey,programId:s}))),o.lamports<i&&(a=a||new N,a.add(J.transfer({fromPubkey:e.publicKey,toPubkey:r.publicKey,lamports:i-o.lamports})))}else a=(new N).add(J.createAccount({fromPubkey:e.publicKey,newAccountPubkey:r.publicKey,lamports:i>0?i:1,space:n.length,programId:s}));null!==a&&await L(t,a,[e,r],{commitment:"confirmed"})}const i=g.struct([g.u32("instruction"),g.u32("offset"),g.u32("bytesLength"),g.u32("bytesLengthPadding"),g.seq(g.u8("byte"),g.offset(g.u32(),-8),"bytes")]),a=tt.chunkSize;let c=0,u=n,l=[];for(;u.length>0;){const n=u.slice(0,a),h=o.Buffer.alloc(a+16);i.encode({instruction:0,offset:c,bytes:n},h);const d=(new N).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0}],programId:s,data:h});if(l.push(L(t,d,[e,r],{commitment:"confirmed"})),t._rpcEndpoint.includes("solana.com")){const t=4;await M(1e3/t)}c+=a,u=u.slice(a)}await Promise.all(l);{const n=g.struct([g.u32("instruction")]),i=o.Buffer.alloc(n.span);n.encode({instruction:1},i);const a=(new N).add({keys:[{pubkey:r.publicKey,isSigner:!0,isWritable:!0},{pubkey:K,isSigner:!1,isWritable:!1}],programId:s,data:i});await L(t,a,[e,r],{commitment:"confirmed"})}return!0}}(0,s.Z)(tt,"chunkSize",Y);new A("BPFLoader2111111111111111111111111111111111");var et={exports:{}};!function(t,e){var r=function(){if("undefined"!==typeof self)return self;if("undefined"!==typeof window)return window;if("undefined"!==typeof r)return r;throw new Error("unable to locate global object")}();t.exports=e=r.fetch,r.fetch&&(e.default=r.fetch.bind(r)),e.Headers=r.Headers,e.Request=r.Request,e.Response=r.Response}(et,et.exports);var rt=et.exports;function st(t){let e=0;for(;t>1;)t/=2,e++;return e}class nt{constructor(t,e,r,n,i){(0,s.Z)(this,"slotsPerEpoch",void 0),(0,s.Z)(this,"leaderScheduleSlotOffset",void 0),(0,s.Z)(this,"warmup",void 0),(0,s.Z)(this,"firstNormalEpoch",void 0),(0,s.Z)(this,"firstNormalSlot",void 0),this.slotsPerEpoch=t,this.leaderScheduleSlotOffset=e,this.warmup=r,this.firstNormalEpoch=n,this.firstNormalSlot=i}getEpoch(t){return this.getEpochAndSlotIndex(t)[0]}getEpochAndSlotIndex(t){if(t<this.firstNormalSlot){const r=st(0===(e=t+32+1)?1:(e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,1+(e|=e>>32)))-st(32)-1;return[r,t-(this.getSlotsInEpoch(r)-32)]}{const e=t-this.firstNormalSlot,r=Math.floor(e/this.slotsPerEpoch);return[this.firstNormalEpoch+r,e%this.slotsPerEpoch]}var e}getFirstSlotInEpoch(t){return t<=this.firstNormalEpoch?32*(Math.pow(2,t)-1):(t-this.firstNormalEpoch)*this.slotsPerEpoch+this.firstNormalSlot}getLastSlotInEpoch(t){return this.getFirstSlotInEpoch(t)+this.getSlotsInEpoch(t)-1}getSlotsInEpoch(t){return t<this.firstNormalEpoch?Math.pow(2,t+st(32)):this.slotsPerEpoch}}class it extends Error{constructor(t,e){super(t),(0,s.Z)(this,"logs",void 0),this.logs=e}}const ot=(0,p.oQ)((0,p.eE)(A),(0,p.Z_)(),(t=>new A(t))),at=(0,p.bc)([(0,p.Z_)(),(0,p.i0)("base64")]),ct=(0,p.oQ)((0,p.eE)(o.Buffer),at,(t=>o.Buffer.from(t[0],"base64")));function ut(t){return(0,p.G0)([(0,p.dt)({jsonrpc:(0,p.i0)("2.0"),id:(0,p.Z_)(),result:t}),(0,p.dt)({jsonrpc:(0,p.i0)("2.0"),id:(0,p.Z_)(),error:(0,p.dt)({code:(0,p._4)(),message:(0,p.Z_)(),data:(0,p.jt)((0,p.Yj)())})})])}const lt=ut((0,p._4)());function ht(t){return(0,p.oQ)(ut(t),lt,(e=>"error"in e?e:{...e,result:(0,p.Ue)(e.result,t)}))}function dt(t){return ht((0,p.dt)({context:(0,p.dt)({slot:(0,p.Rx)()}),value:t}))}function gt(t){return(0,p.dt)({context:(0,p.dt)({slot:(0,p.Rx)()}),value:t})}const pt=(0,p.dt)({foundation:(0,p.Rx)(),foundationTerm:(0,p.Rx)(),initial:(0,p.Rx)(),taper:(0,p.Rx)(),terminal:(0,p.Rx)()}),bt=ht((0,p.IX)((0,p.AG)((0,p.dt)({epoch:(0,p.Rx)(),effectiveSlot:(0,p.Rx)(),amount:(0,p.Rx)(),postBalance:(0,p.Rx)()})))),ft=(0,p.dt)({epoch:(0,p.Rx)(),slotIndex:(0,p.Rx)(),slotsInEpoch:(0,p.Rx)(),absoluteSlot:(0,p.Rx)(),blockHeight:(0,p.jt)((0,p.Rx)()),transactionCount:(0,p.jt)((0,p.Rx)())}),mt=(0,p.dt)({slotsPerEpoch:(0,p.Rx)(),leaderScheduleSlotOffset:(0,p.Rx)(),warmup:(0,p.O7)(),firstNormalEpoch:(0,p.Rx)(),firstNormalSlot:(0,p.Rx)()}),yt=(0,p.IM)((0,p.Z_)(),(0,p.IX)((0,p.Rx)())),kt=(0,p.AG)((0,p.G0)([(0,p.dt)({}),(0,p.Z_)()])),wt=(0,p.dt)({err:kt}),St=(0,p.i0)("receivedSignature"),_t=(0,p.dt)({"solana-core":(0,p.Z_)(),"feature-set":(0,p.jt)((0,p.Rx)())}),It=dt((0,p.dt)({err:(0,p.AG)((0,p.G0)([(0,p.dt)({}),(0,p.Z_)()])),logs:(0,p.AG)((0,p.IX)((0,p.Z_)()))}));const At=ht(pt),xt=ht(ft),Rt=ht(mt),Bt=ht(yt),vt=ht((0,p.Rx)()),Et=dt((0,p.dt)({total:(0,p.Rx)(),circulating:(0,p.Rx)(),nonCirculating:(0,p.Rx)(),nonCirculatingAccounts:(0,p.IX)(ot)})),Pt=(0,p.dt)({amount:(0,p.Z_)(),uiAmount:(0,p.AG)((0,p.Rx)()),decimals:(0,p.Rx)(),uiAmountString:(0,p.jt)((0,p.Z_)())}),Wt=dt((0,p.IX)((0,p.dt)({address:ot,amount:(0,p.Z_)(),uiAmount:(0,p.AG)((0,p.Rx)()),decimals:(0,p.Rx)(),uiAmountString:(0,p.jt)((0,p.Z_)())}))),Ct=dt((0,p.IX)((0,p.dt)({pubkey:ot,account:(0,p.dt)({executable:(0,p.O7)(),owner:ot,lamports:(0,p.Rx)(),data:ct,rentEpoch:(0,p.Rx)()})}))),Zt=(0,p.dt)({program:(0,p.Z_)(),parsed:(0,p._4)(),space:(0,p.Rx)()}),Ut=dt((0,p.IX)((0,p.dt)({pubkey:ot,account:(0,p.dt)({executable:(0,p.O7)(),owner:ot,lamports:(0,p.Rx)(),data:Zt,rentEpoch:(0,p.Rx)()})}))),Tt=dt((0,p.IX)((0,p.dt)({lamports:(0,p.Rx)(),address:ot}))),zt=(0,p.dt)({executable:(0,p.O7)(),owner:ot,lamports:(0,p.Rx)(),data:ct,rentEpoch:(0,p.Rx)()}),qt=(0,p.dt)({pubkey:ot,account:zt}),Ot=(0,p.oQ)((0,p.G0)([(0,p.eE)(o.Buffer),Zt]),(0,p.G0)([at,Zt]),(t=>Array.isArray(t)?(0,p.Ue)(t,ct):t)),Nt=(0,p.dt)({executable:(0,p.O7)(),owner:ot,lamports:(0,p.Rx)(),data:Ot,rentEpoch:(0,p.Rx)()}),jt=(0,p.dt)({pubkey:ot,account:Nt}),Gt=(0,p.dt)({state:(0,p.G0)([(0,p.i0)("active"),(0,p.i0)("inactive"),(0,p.i0)("activating"),(0,p.i0)("deactivating")]),active:(0,p.Rx)(),inactive:(0,p.Rx)()}),Kt=ht((0,p.IX)((0,p.dt)({signature:(0,p.Z_)(),slot:(0,p.Rx)(),err:kt,memo:(0,p.AG)((0,p.Z_)()),blockTime:(0,p.jt)((0,p.AG)((0,p.Rx)()))}))),Xt=ht((0,p.IX)((0,p.dt)({signature:(0,p.Z_)(),slot:(0,p.Rx)(),err:kt,memo:(0,p.AG)((0,p.Z_)()),blockTime:(0,p.jt)((0,p.AG)((0,p.Rx)()))}))),Lt=(0,p.dt)({subscription:(0,p.Rx)(),result:gt(zt)}),Mt=(0,p.dt)({pubkey:ot,account:zt}),$t=(0,p.dt)({subscription:(0,p.Rx)(),result:gt(Mt)}),Ft=(0,p.dt)({parent:(0,p.Rx)(),slot:(0,p.Rx)(),root:(0,p.Rx)()}),Dt=(0,p.dt)({subscription:(0,p.Rx)(),result:Ft}),Ht=(0,p.G0)([(0,p.dt)({type:(0,p.G0)([(0,p.i0)("firstShredReceived"),(0,p.i0)("completed"),(0,p.i0)("optimisticConfirmation"),(0,p.i0)("root")]),slot:(0,p.Rx)(),timestamp:(0,p.Rx)()}),(0,p.dt)({type:(0,p.i0)("createdBank"),parent:(0,p.Rx)(),slot:(0,p.Rx)(),timestamp:(0,p.Rx)()}),(0,p.dt)({type:(0,p.i0)("frozen"),slot:(0,p.Rx)(),timestamp:(0,p.Rx)(),stats:(0,p.dt)({numTransactionEntries:(0,p.Rx)(),numSuccessfulTransactions:(0,p.Rx)(),numFailedTransactions:(0,p.Rx)(),maxTransactionsPerEntry:(0,p.Rx)()})}),(0,p.dt)({type:(0,p.i0)("dead"),slot:(0,p.Rx)(),timestamp:(0,p.Rx)(),err:(0,p.Z_)()})]),Vt=(0,p.dt)({subscription:(0,p.Rx)(),result:Ht}),Qt=(0,p.dt)({subscription:(0,p.Rx)(),result:gt((0,p.G0)([wt,St]))}),Jt=(0,p.dt)({subscription:(0,p.Rx)(),result:(0,p.Rx)()}),Yt=(0,p.dt)({pubkey:(0,p.Z_)(),gossip:(0,p.AG)((0,p.Z_)()),tpu:(0,p.AG)((0,p.Z_)()),rpc:(0,p.AG)((0,p.Z_)()),version:(0,p.AG)((0,p.Z_)())}),te=(0,p.dt)({votePubkey:(0,p.Z_)(),nodePubkey:(0,p.Z_)(),activatedStake:(0,p.Rx)(),epochVoteAccount:(0,p.O7)(),epochCredits:(0,p.IX)((0,p.bc)([(0,p.Rx)(),(0,p.Rx)(),(0,p.Rx)()])),commission:(0,p.Rx)(),lastVote:(0,p.Rx)(),rootSlot:(0,p.AG)((0,p.Rx)())}),ee=ht((0,p.dt)({current:(0,p.IX)(te),delinquent:(0,p.IX)(te)})),re=(0,p.G0)([(0,p.i0)("processed"),(0,p.i0)("confirmed"),(0,p.i0)("finalized")]),se=(0,p.dt)({slot:(0,p.Rx)(),confirmations:(0,p.AG)((0,p.Rx)()),err:kt,confirmationStatus:(0,p.jt)(re)}),ne=dt((0,p.IX)((0,p.AG)(se))),ie=ht((0,p.Rx)()),oe=(0,p.dt)({signatures:(0,p.IX)((0,p.Z_)()),message:(0,p.dt)({accountKeys:(0,p.IX)((0,p.Z_)()),header:(0,p.dt)({numRequiredSignatures:(0,p.Rx)(),numReadonlySignedAccounts:(0,p.Rx)(),numReadonlyUnsignedAccounts:(0,p.Rx)()}),instructions:(0,p.IX)((0,p.dt)({accounts:(0,p.IX)((0,p.Rx)()),data:(0,p.Z_)(),programIdIndex:(0,p.Rx)()})),recentBlockhash:(0,p.Z_)()})}),ae=(0,p.dt)({parsed:(0,p._4)(),program:(0,p.Z_)(),programId:ot}),ce=(0,p.dt)({accounts:(0,p.IX)(ot),data:(0,p.Z_)(),programId:ot}),ue=(0,p.G0)([ce,ae]),le=(0,p.G0)([(0,p.dt)({parsed:(0,p._4)(),program:(0,p.Z_)(),programId:(0,p.Z_)()}),(0,p.dt)({accounts:(0,p.IX)((0,p.Z_)()),data:(0,p.Z_)(),programId:(0,p.Z_)()})]),he=(0,p.oQ)(ue,le,(t=>"accounts"in t?(0,p.Ue)(t,ce):(0,p.Ue)(t,ae))),de=(0,p.dt)({signatures:(0,p.IX)((0,p.Z_)()),message:(0,p.dt)({accountKeys:(0,p.IX)((0,p.dt)({pubkey:ot,signer:(0,p.O7)(),writable:(0,p.O7)()})),instructions:(0,p.IX)(he),recentBlockhash:(0,p.Z_)()})}),ge=(0,p.dt)({accountIndex:(0,p.Rx)(),mint:(0,p.Z_)(),uiTokenAmount:Pt}),pe=(0,p.dt)({err:kt,fee:(0,p.Rx)(),innerInstructions:(0,p.jt)((0,p.AG)((0,p.IX)((0,p.dt)({index:(0,p.Rx)(),instructions:(0,p.IX)((0,p.dt)({accounts:(0,p.IX)((0,p.Rx)()),data:(0,p.Z_)(),programIdIndex:(0,p.Rx)()}))})))),preBalances:(0,p.IX)((0,p.Rx)()),postBalances:(0,p.IX)((0,p.Rx)()),logMessages:(0,p.jt)((0,p.AG)((0,p.IX)((0,p.Z_)()))),preTokenBalances:(0,p.jt)((0,p.AG)((0,p.IX)(ge))),postTokenBalances:(0,p.jt)((0,p.AG)((0,p.IX)(ge)))}),be=(0,p.dt)({err:kt,fee:(0,p.Rx)(),innerInstructions:(0,p.jt)((0,p.AG)((0,p.IX)((0,p.dt)({index:(0,p.Rx)(),instructions:(0,p.IX)(he)})))),preBalances:(0,p.IX)((0,p.Rx)()),postBalances:(0,p.IX)((0,p.Rx)()),logMessages:(0,p.jt)((0,p.AG)((0,p.IX)((0,p.Z_)()))),preTokenBalances:(0,p.jt)((0,p.AG)((0,p.IX)(ge))),postTokenBalances:(0,p.jt)((0,p.AG)((0,p.IX)(ge)))}),fe=ht((0,p.AG)((0,p.dt)({blockhash:(0,p.Z_)(),previousBlockhash:(0,p.Z_)(),parentSlot:(0,p.Rx)(),transactions:(0,p.IX)((0,p.dt)({transaction:oe,meta:(0,p.AG)(pe)})),rewards:(0,p.jt)((0,p.IX)((0,p.dt)({pubkey:(0,p.Z_)(),lamports:(0,p.Rx)(),postBalance:(0,p.AG)((0,p.Rx)()),rewardType:(0,p.AG)((0,p.Z_)())}))),blockTime:(0,p.AG)((0,p.Rx)())}))),me=ht((0,p.AG)((0,p.dt)({blockhash:(0,p.Z_)(),previousBlockhash:(0,p.Z_)(),parentSlot:(0,p.Rx)(),signatures:(0,p.IX)((0,p.Z_)()),blockTime:(0,p.AG)((0,p.Rx)())}))),ye=ht((0,p.AG)((0,p.dt)({slot:(0,p.Rx)(),meta:pe,blockTime:(0,p.jt)((0,p.AG)((0,p.Rx)())),transaction:oe}))),ke=ht((0,p.AG)((0,p.dt)({slot:(0,p.Rx)(),transaction:de,meta:(0,p.AG)(be),blockTime:(0,p.jt)((0,p.AG)((0,p.Rx)()))}))),we=dt((0,p.dt)({blockhash:(0,p.Z_)(),feeCalculator:(0,p.dt)({lamportsPerSignature:(0,p.Rx)()})})),Se=(0,p.dt)({slot:(0,p.Rx)(),numTransactions:(0,p.Rx)(),numSlots:(0,p.Rx)(),samplePeriodSecs:(0,p.Rx)()}),_e=ht((0,p.IX)(Se)),Ie=dt((0,p.AG)((0,p.dt)({feeCalculator:(0,p.dt)({lamportsPerSignature:(0,p.Rx)()})}))),Ae=ht((0,p.Z_)()),xe=ht((0,p.Z_)()),Re=(0,p.dt)({err:kt,logs:(0,p.IX)((0,p.Z_)()),signature:(0,p.Z_)()}),Be=(0,p.dt)({result:gt(Re),subscription:(0,p.Rx)()});class ve{constructor(t,e){(0,s.Z)(this,"_commitment",void 0),(0,s.Z)(this,"_rpcEndpoint",void 0),(0,s.Z)(this,"_rpcWsEndpoint",void 0),(0,s.Z)(this,"_rpcClient",void 0),(0,s.Z)(this,"_rpcRequest",void 0),(0,s.Z)(this,"_rpcBatchRequest",void 0),(0,s.Z)(this,"_rpcWebSocket",void 0),(0,s.Z)(this,"_rpcWebSocketConnected",!1),(0,s.Z)(this,"_rpcWebSocketHeartbeat",null),(0,s.Z)(this,"_rpcWebSocketIdleTimeout",null),(0,s.Z)(this,"_disableBlockhashCaching",!1),(0,s.Z)(this,"_pollingBlockhash",!1),(0,s.Z)(this,"_blockhashInfo",{recentBlockhash:null,lastFetch:0,transactionSignatures:[],simulatedSignatures:[]}),(0,s.Z)(this,"_accountChangeSubscriptionCounter",0),(0,s.Z)(this,"_accountChangeSubscriptions",{}),(0,s.Z)(this,"_programAccountChangeSubscriptionCounter",0),(0,s.Z)(this,"_programAccountChangeSubscriptions",{}),(0,s.Z)(this,"_rootSubscriptionCounter",0),(0,s.Z)(this,"_rootSubscriptions",{}),(0,s.Z)(this,"_signatureSubscriptionCounter",0),(0,s.Z)(this,"_signatureSubscriptions",{}),(0,s.Z)(this,"_slotSubscriptionCounter",0),(0,s.Z)(this,"_slotSubscriptions",{}),(0,s.Z)(this,"_logsSubscriptionCounter",0),(0,s.Z)(this,"_logsSubscriptions",{}),(0,s.Z)(this,"_slotUpdateSubscriptionCounter",0),(0,s.Z)(this,"_slotUpdateSubscriptions",{});let r=new URL(t);r.protocol;let n,i,o,a;var c;e&&"string"===typeof e?this._commitment=e:e&&(this._commitment=e.commitment,n=e.wsEndpoint,i=e.httpHeaders,o=e.fetchMiddleware,a=e.disableRetryOnRateLimit),this._rpcEndpoint=t,this._rpcWsEndpoint=n||function(t){let e=new URL(t);const r="https:"===e.protocol;return e.protocol=r?"wss:":"ws:",e.host="",""!==e.port&&(e.port=String(Number(e.port)+1)),e.toString()}(t),this._rpcClient=function(t,e,r,s,n){let i;return s&&(i=(t,e)=>new Promise(((r,n)=>{s(t,e,(async(t,e)=>{try{r(await rt(t,e))}catch(s){n(s)}}))}))),new(m())((async(e,s)=>{const o={method:"POST",body:e,agent:void 0,headers:Object.assign({"Content-Type":"application/json"},r||{})};try{let e,r=5,a=500;for(;e=i?await i(t,o):await rt(t,o),429===e.status&&!0!==n&&(r-=1,0!==r);)console.log(`Server responded with ${e.status} ${e.statusText}.  Retrying after ${a}ms delay...`),await M(a),a*=2;const c=await e.text();e.ok?s(null,c):s(new Error(`${e.status} ${e.statusText}: ${c}`))}catch(a){s(a)}}),{})}(r.toString(),0,i,o,a),this._rpcRequest=(c=this._rpcClient,(t,e)=>new Promise(((r,s)=>{c.request(t,e,((t,e)=>{t?s(t):r(e)}))}))),this._rpcBatchRequest=function(t){return e=>new Promise(((r,s)=>{0===e.length&&r([]);const n=e.map((e=>t.request(e.methodName,e.args)));t.request(n,((t,e)=>{t?s(t):r(e)}))}))}(this._rpcClient),this._rpcWebSocket=new b.K(this._rpcWsEndpoint,{autoconnect:!1,max_reconnects:1/0}),this._rpcWebSocket.on("open",this._wsOnOpen.bind(this)),this._rpcWebSocket.on("error",this._wsOnError.bind(this)),this._rpcWebSocket.on("close",this._wsOnClose.bind(this)),this._rpcWebSocket.on("accountNotification",this._wsOnAccountNotification.bind(this)),this._rpcWebSocket.on("programNotification",this._wsOnProgramAccountNotification.bind(this)),this._rpcWebSocket.on("slotNotification",this._wsOnSlotNotification.bind(this)),this._rpcWebSocket.on("slotsUpdatesNotification",this._wsOnSlotUpdatesNotification.bind(this)),this._rpcWebSocket.on("signatureNotification",this._wsOnSignatureNotification.bind(this)),this._rpcWebSocket.on("rootNotification",this._wsOnRootNotification.bind(this)),this._rpcWebSocket.on("logsNotification",this._wsOnLogsNotification.bind(this))}get commitment(){return this._commitment}async getBalanceAndContext(t,e){const r=this._buildArgs([t.toBase58()],e),s=await this._rpcRequest("getBalance",r),n=(0,p.Ue)(s,dt((0,p.Rx)()));if("error"in n)throw new Error("failed to get balance for "+t.toBase58()+": "+n.error.message);return n.result}async getBalance(t,e){return await this.getBalanceAndContext(t,e).then((t=>t.value)).catch((e=>{throw new Error("failed to get balance of account "+t.toBase58()+": "+e)}))}async getBlockTime(t){const e=await this._rpcRequest("getBlockTime",[t]),r=(0,p.Ue)(e,ht((0,p.AG)((0,p.Rx)())));if("error"in r)throw new Error("failed to get block time for slot "+t+": "+r.error.message);return r.result}async getMinimumLedgerSlot(){const t=await this._rpcRequest("minimumLedgerSlot",[]),e=(0,p.Ue)(t,ht((0,p.Rx)()));if("error"in e)throw new Error("failed to get minimum ledger slot: "+e.error.message);return e.result}async getFirstAvailableBlock(){const t=await this._rpcRequest("getFirstAvailableBlock",[]),e=(0,p.Ue)(t,vt);if("error"in e)throw new Error("failed to get first available block: "+e.error.message);return e.result}async getSupply(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getSupply",e),s=(0,p.Ue)(r,Et);if("error"in s)throw new Error("failed to get supply: "+s.error.message);return s.result}async getTokenSupply(t,e){const r=this._buildArgs([t.toBase58()],e),s=await this._rpcRequest("getTokenSupply",r),n=(0,p.Ue)(s,dt(Pt));if("error"in n)throw new Error("failed to get token supply: "+n.error.message);return n.result}async getTokenAccountBalance(t,e){const r=this._buildArgs([t.toBase58()],e),s=await this._rpcRequest("getTokenAccountBalance",r),n=(0,p.Ue)(s,dt(Pt));if("error"in n)throw new Error("failed to get token account balance: "+n.error.message);return n.result}async getTokenAccountsByOwner(t,e,r){let s=[t.toBase58()];"mint"in e?s.push({mint:e.mint.toBase58()}):s.push({programId:e.programId.toBase58()});const n=this._buildArgs(s,r,"base64"),i=await this._rpcRequest("getTokenAccountsByOwner",n),o=(0,p.Ue)(i,Ct);if("error"in o)throw new Error("failed to get token accounts owned by account "+t.toBase58()+": "+o.error.message);return o.result}async getParsedTokenAccountsByOwner(t,e,r){let s=[t.toBase58()];"mint"in e?s.push({mint:e.mint.toBase58()}):s.push({programId:e.programId.toBase58()});const n=this._buildArgs(s,r,"jsonParsed"),i=await this._rpcRequest("getTokenAccountsByOwner",n),o=(0,p.Ue)(i,Ut);if("error"in o)throw new Error("failed to get token accounts owned by account "+t.toBase58()+": "+o.error.message);return o.result}async getLargestAccounts(t){const e={...t,commitment:t&&t.commitment||this.commitment},r=e.filter||e.commitment?[e]:[],s=await this._rpcRequest("getLargestAccounts",r),n=(0,p.Ue)(s,Tt);if("error"in n)throw new Error("failed to get largest accounts: "+n.error.message);return n.result}async getTokenLargestAccounts(t,e){const r=this._buildArgs([t.toBase58()],e),s=await this._rpcRequest("getTokenLargestAccounts",r),n=(0,p.Ue)(s,Wt);if("error"in n)throw new Error("failed to get token largest accounts: "+n.error.message);return n.result}async getAccountInfoAndContext(t,e){const r=this._buildArgs([t.toBase58()],e,"base64"),s=await this._rpcRequest("getAccountInfo",r),n=(0,p.Ue)(s,dt((0,p.AG)(zt)));if("error"in n)throw new Error("failed to get info about account "+t.toBase58()+": "+n.error.message);return n.result}async getParsedAccountInfo(t,e){const r=this._buildArgs([t.toBase58()],e,"jsonParsed"),s=await this._rpcRequest("getAccountInfo",r),n=(0,p.Ue)(s,dt((0,p.AG)(Nt)));if("error"in n)throw new Error("failed to get info about account "+t.toBase58()+": "+n.error.message);return n.result}async getAccountInfo(t,e){try{return(await this.getAccountInfoAndContext(t,e)).value}catch(r){throw new Error("failed to get info about account "+t.toBase58()+": "+r)}}async getMultipleAccountsInfo(t,e){const r=t.map((t=>t.toBase58())),s=this._buildArgs([r],e,"base64"),n=await this._rpcRequest("getMultipleAccounts",s),i=(0,p.Ue)(n,dt((0,p.IX)((0,p.AG)(zt))));if("error"in i)throw new Error("failed to get info for accounts "+r+": "+i.error.message);return i.result.value}async getStakeActivation(t,e,r){const s=this._buildArgs([t.toBase58()],e,void 0,void 0!==r?{epoch:r}:void 0),n=await this._rpcRequest("getStakeActivation",s),i=(0,p.Ue)(n,ht(Gt));if("error"in i)throw new Error(`failed to get Stake Activation ${t.toBase58()}: ${i.error.message}`);return i.result}async getProgramAccounts(t,e){const r={};let s,n;e&&("string"===typeof e?s=e:(s=e.commitment,n=e.encoding,e.dataSlice&&(r.dataSlice=e.dataSlice),e.filters&&(r.filters=e.filters)));const i=this._buildArgs([t.toBase58()],s,n||"base64",r),o=await this._rpcRequest("getProgramAccounts",i),a=(0,p.Ue)(o,ht((0,p.IX)(qt)));if("error"in a)throw new Error("failed to get accounts owned by program "+t.toBase58()+": "+a.error.message);return a.result}async getParsedProgramAccounts(t,e){const r={};let s;e&&("string"===typeof e?s=e:(s=e.commitment,e.filters&&(r.filters=e.filters)));const n=this._buildArgs([t.toBase58()],s,"jsonParsed",r),i=await this._rpcRequest("getProgramAccounts",n),o=(0,p.Ue)(i,ht((0,p.IX)(jt)));if("error"in o)throw new Error("failed to get accounts owned by program "+t.toBase58()+": "+o.error.message);return o.result}async confirmTransaction(t,e){let r;try{r=l().decode(t)}catch(u){throw new Error("signature must be base58 encoded: "+t)}T(64===r.length,"signature has invalid length");const s=Date.now(),n=e||this.commitment;let i,o=null;const a=new Promise(((e,r)=>{try{i=this.onSignature(t,((t,r)=>{i=void 0,o={context:r,value:t},e(null)}),n)}catch(u){r(u)}}));let c=6e4;switch(n){case"processed":case"recent":case"single":case"confirmed":case"singleGossip":c=3e4}try{await function(t,e){let r;const s=new Promise((t=>{r=setTimeout((()=>t(null)),e)}));return Promise.race([t,s]).then((t=>(clearTimeout(r),t)))}(a,c)}finally{i&&this.removeSignatureListener(i)}if(null===o){const e=(Date.now()-s)/1e3;throw new Error(`Transaction was not confirmed in ${e.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${t} using the Solana Explorer or CLI tools.`)}return o}async getClusterNodes(){const t=await this._rpcRequest("getClusterNodes",[]),e=(0,p.Ue)(t,ht((0,p.IX)(Yt)));if("error"in e)throw new Error("failed to get cluster nodes: "+e.error.message);return e.result}async getVoteAccounts(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getVoteAccounts",e),s=(0,p.Ue)(r,ee);if("error"in s)throw new Error("failed to get vote accounts: "+s.error.message);return s.result}async getSlot(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getSlot",e),s=(0,p.Ue)(r,ht((0,p.Rx)()));if("error"in s)throw new Error("failed to get slot: "+s.error.message);return s.result}async getSlotLeader(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getSlotLeader",e),s=(0,p.Ue)(r,ht((0,p.Z_)()));if("error"in s)throw new Error("failed to get slot leader: "+s.error.message);return s.result}async getSlotLeaders(t,e){const r=[t,e],s=await this._rpcRequest("getSlotLeaders",r),n=(0,p.Ue)(s,ht((0,p.IX)(ot)));if("error"in n)throw new Error("failed to get slot leaders: "+n.error.message);return n.result}async getSignatureStatus(t,e){const{context:r,value:s}=await this.getSignatureStatuses([t],e);T(1===s.length);return{context:r,value:s[0]}}async getSignatureStatuses(t,e){const r=[t];e&&r.push(e);const s=await this._rpcRequest("getSignatureStatuses",r),n=(0,p.Ue)(s,ne);if("error"in n)throw new Error("failed to get signature status: "+n.error.message);return n.result}async getTransactionCount(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getTransactionCount",e),s=(0,p.Ue)(r,ht((0,p.Rx)()));if("error"in s)throw new Error("failed to get transaction count: "+s.error.message);return s.result}async getTotalSupply(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getSupply",e),s=(0,p.Ue)(r,Et);if("error"in s)throw new Error("failed to get total supply: "+s.error.message);return s.result.value.total}async getInflationGovernor(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getInflationGovernor",e),s=(0,p.Ue)(r,At);if("error"in s)throw new Error("failed to get inflation: "+s.error.message);return s.result}async getInflationReward(t,e,r){const s=this._buildArgs([t.map((t=>t.toBase58()))],r,void 0,{epoch:e}),n=await this._rpcRequest("getInflationReward",s),i=(0,p.Ue)(n,bt);if("error"in i)throw new Error("failed to get inflation reward: "+i.error.message);return i.result}async getEpochInfo(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getEpochInfo",e),s=(0,p.Ue)(r,xt);if("error"in s)throw new Error("failed to get epoch info: "+s.error.message);return s.result}async getEpochSchedule(){const t=await this._rpcRequest("getEpochSchedule",[]),e=(0,p.Ue)(t,Rt);if("error"in e)throw new Error("failed to get epoch schedule: "+e.error.message);const r=e.result;return new nt(r.slotsPerEpoch,r.leaderScheduleSlotOffset,r.warmup,r.firstNormalEpoch,r.firstNormalSlot)}async getLeaderSchedule(){const t=await this._rpcRequest("getLeaderSchedule",[]),e=(0,p.Ue)(t,Bt);if("error"in e)throw new Error("failed to get leader schedule: "+e.error.message);return e.result}async getMinimumBalanceForRentExemption(t,e){const r=this._buildArgs([t],e),s=await this._rpcRequest("getMinimumBalanceForRentExemption",r),n=(0,p.Ue)(s,ie);return"error"in n?(console.warn("Unable to fetch minimum balance for rent exemption"),0):n.result}async getRecentBlockhashAndContext(t){const e=this._buildArgs([],t),r=await this._rpcRequest("getRecentBlockhash",e),s=(0,p.Ue)(r,we);if("error"in s)throw new Error("failed to get recent blockhash: "+s.error.message);return s.result}async getRecentPerformanceSamples(t){const e=this._buildArgs(t?[t]:[]),r=await this._rpcRequest("getRecentPerformanceSamples",e),s=(0,p.Ue)(r,_e);if("error"in s)throw new Error("failed to get recent performance samples: "+s.error.message);return s.result}async getFeeCalculatorForBlockhash(t,e){const r=this._buildArgs([t],e),s=await this._rpcRequest("getFeeCalculatorForBlockhash",r),n=(0,p.Ue)(s,Ie);if("error"in n)throw new Error("failed to get fee calculator: "+n.error.message);const{context:i,value:o}=n.result;return{context:i,value:null!==o?o.feeCalculator:null}}async getRecentBlockhash(t){try{return(await this.getRecentBlockhashAndContext(t)).value}catch(e){throw new Error("failed to get recent blockhash: "+e)}}async getVersion(){const t=await this._rpcRequest("getVersion",[]),e=(0,p.Ue)(t,ht(_t));if("error"in e)throw new Error("failed to get version: "+e.error.message);return e.result}async getBlock(t,e){const r=this._buildArgsAtLeastConfirmed([t],e&&e.commitment),s=await this._rpcRequest("getConfirmedBlock",r),n=(0,p.Ue)(s,fe);if("error"in n)throw new Error("failed to get confirmed block: "+n.error.message);const i=n.result;return i?{...i,transactions:i.transactions.map((({transaction:t,meta:e})=>{const r=new U(t.message);return{meta:e,transaction:{...t,message:r}}}))}:i}async getTransaction(t,e){const r=this._buildArgsAtLeastConfirmed([t],e&&e.commitment),s=await this._rpcRequest("getConfirmedTransaction",r),n=(0,p.Ue)(s,ye);if("error"in n)throw new Error("failed to get confirmed transaction: "+n.error.message);const i=n.result;return i?{...i,transaction:{...i.transaction,message:new U(i.transaction.message)}}:i}async getConfirmedBlock(t,e){const r=await this.getBlock(t,{commitment:e});if(!r)throw new Error("Confirmed block "+t+" not found");return{...r,transactions:r.transactions.map((({transaction:t,meta:e})=>({meta:e,transaction:N.populate(t.message,t.signatures)})))}}async getConfirmedBlockSignatures(t,e){const r=this._buildArgsAtLeastConfirmed([t],e,void 0,{transactionDetails:"signatures",rewards:!1}),s=await this._rpcRequest("getConfirmedBlock",r),n=(0,p.Ue)(s,me);if("error"in n)throw new Error("failed to get confirmed block: "+n.error.message);const i=n.result;if(!i)throw new Error("Confirmed block "+t+" not found");return i}async getConfirmedTransaction(t,e){const r=await this.getTransaction(t,{commitment:e});if(!r)return r;const{message:s,signatures:n}=r.transaction;return{...r,transaction:N.populate(s,n)}}async getParsedConfirmedTransaction(t,e){const r=this._buildArgsAtLeastConfirmed([t],e,"jsonParsed"),s=await this._rpcRequest("getConfirmedTransaction",r),n=(0,p.Ue)(s,ke);if("error"in n)throw new Error("failed to get confirmed transaction: "+n.error.message);return n.result}async getParsedConfirmedTransactions(t,e){const r=t.map((t=>({methodName:"getConfirmedTransaction",args:this._buildArgsAtLeastConfirmed([t],e,"jsonParsed")})));return(await this._rpcBatchRequest(r)).map((t=>{const e=(0,p.Ue)(t,ke);if("error"in e)throw new Error("failed to get confirmed transactions: "+e.error.message);return e.result}))}async getConfirmedSignaturesForAddress(t,e,r){let s={},n=await this.getFirstAvailableBlock();for(;!("until"in s)&&!(--e<=0||e<n);)try{const t=await this.getConfirmedBlockSignatures(e,"finalized");t.signatures.length>0&&(s.until=t.signatures[t.signatures.length-1].toString())}catch(o){if(o.message.includes("skipped"))continue;throw o}let i=await this.getSlot("finalized");for(;!("before"in s)&&!(++r>i);)try{const t=await this.getConfirmedBlockSignatures(r);t.signatures.length>0&&(s.before=t.signatures[t.signatures.length-1].toString())}catch(o){if(o.message.includes("skipped"))continue;throw o}return(await this.getConfirmedSignaturesForAddress2(t,s)).map((t=>t.signature))}async getConfirmedSignaturesForAddress2(t,e,r){const s=this._buildArgsAtLeastConfirmed([t.toBase58()],r,void 0,e),n=await this._rpcRequest("getConfirmedSignaturesForAddress2",s),i=(0,p.Ue)(n,Kt);if("error"in i)throw new Error("failed to get confirmed signatures for address: "+i.error.message);return i.result}async getSignaturesForAddress(t,e,r){const s=this._buildArgsAtLeastConfirmed([t.toBase58()],r,void 0,e),n=await this._rpcRequest("getSignaturesForAddress",s),i=(0,p.Ue)(n,Xt);if("error"in i)throw new Error("failed to get signatures for address: "+i.error.message);return i.result}async getNonceAndContext(t,e){const{context:r,value:s}=await this.getAccountInfoAndContext(t,e);let n=null;return null!==s&&(n=V.fromAccountData(s.data)),{context:r,value:n}}async getNonce(t,e){return await this.getNonceAndContext(t,e).then((t=>t.value)).catch((e=>{throw new Error("failed to get nonce for account "+t.toBase58()+": "+e)}))}async requestAirdrop(t,e){const r=await this._rpcRequest("requestAirdrop",[t.toBase58(),e]),s=(0,p.Ue)(r,Ae);if("error"in s)throw new Error("airdrop to "+t.toBase58()+" failed: "+s.error.message);return s.result}async _recentBlockhash(t){if(!t){for(;this._pollingBlockhash;)await M(100);const t=Date.now()-this._blockhashInfo.lastFetch>=3e4;if(null!==this._blockhashInfo.recentBlockhash&&!t)return this._blockhashInfo.recentBlockhash}return await this._pollNewBlockhash()}async _pollNewBlockhash(){this._pollingBlockhash=!0;try{const t=Date.now();for(let e=0;e<50;e++){const{blockhash:t}=await this.getRecentBlockhash("finalized");if(this._blockhashInfo.recentBlockhash!=t)return this._blockhashInfo={recentBlockhash:t,lastFetch:Date.now(),transactionSignatures:[],simulatedSignatures:[]},t;await M(200)}throw new Error(`Unable to obtain a new blockhash after ${Date.now()-t}ms`)}finally{this._pollingBlockhash=!1}}async simulateTransaction(t,e){if(t.nonceInfo&&e)t.sign(...e);else{let r=this._disableBlockhashCaching;for(;t.recentBlockhash=await this._recentBlockhash(r),e;){if(t.sign(...e),!t.signature)throw new Error("!signature");const s=t.signature.toString("base64");if(!this._blockhashInfo.simulatedSignatures.includes(s)&&!this._blockhashInfo.transactionSignatures.includes(s)){this._blockhashInfo.simulatedSignatures.push(s);break}r=!0}}const r=t.serializeMessage(),s=t._serialize(r).toString("base64"),n={encoding:"base64",commitment:this.commitment};e&&(n.sigVerify=!0);const i=[s,n],o=await this._rpcRequest("simulateTransaction",i),a=(0,p.Ue)(o,It);if("error"in a){let t;if("data"in a.error&&(t=a.error.data.logs,t&&Array.isArray(t))){const e="\n    ",r=e+t.join(e);console.error(a.error.message,r)}throw new it("failed to simulate transaction: "+a.error.message,t)}return a.result}async sendTransaction(t,e,r){if(t.nonceInfo)t.sign(...e);else{let r=this._disableBlockhashCaching;for(;;){if(t.recentBlockhash=await this._recentBlockhash(r),t.sign(...e),!t.signature)throw new Error("!signature");const s=t.signature.toString("base64");if(!this._blockhashInfo.transactionSignatures.includes(s)){this._blockhashInfo.transactionSignatures.push(s);break}r=!0}}const s=t.serialize();return await this.sendRawTransaction(s,r)}async sendRawTransaction(t,e){const r=S(t).toString("base64");return await this.sendEncodedTransaction(r,e)}async sendEncodedTransaction(t,e){const r={encoding:"base64"},s=e&&e.skipPreflight,n=e&&e.preflightCommitment||this.commitment;s&&(r.skipPreflight=s),n&&(r.preflightCommitment=n);const i=[t,r],o=await this._rpcRequest("sendTransaction",i),a=(0,p.Ue)(o,xe);if("error"in a){let t;if("data"in a.error&&(t=a.error.data.logs,t&&Array.isArray(t))){const e="\n    ",r=e+t.join(e);console.error(a.error.message,r)}throw new it("failed to send transaction: "+a.error.message,t)}return a.result}_wsOnOpen(){this._rpcWebSocketConnected=!0,this._rpcWebSocketHeartbeat=setInterval((()=>{this._rpcWebSocket.notify("ping").catch((()=>{}))}),5e3),this._updateSubscriptions()}_wsOnError(t){console.error("ws error:",t.message)}_wsOnClose(t){this._rpcWebSocketHeartbeat&&(clearInterval(this._rpcWebSocketHeartbeat),this._rpcWebSocketHeartbeat=null),1e3!==t?this._resetSubscriptions():this._updateSubscriptions()}async _subscribe(t,e,r){if(null==t.subscriptionId){t.subscriptionId="subscribing";try{const s=await this._rpcWebSocket.call(e,r);"number"===typeof s&&"subscribing"===t.subscriptionId&&(t.subscriptionId=s)}catch(s){"subscribing"===t.subscriptionId&&(t.subscriptionId=null),console.error(`${e} error for argument`,r,s.message)}}}async _unsubscribe(t,e){const r=t.subscriptionId;if(null!=r&&"string"!=typeof r){const t=r;try{await this._rpcWebSocket.call(e,[t])}catch(s){console.error(`${e} error:`,s.message)}}}_resetSubscriptions(){Object.values(this._accountChangeSubscriptions).forEach((t=>t.subscriptionId=null)),Object.values(this._programAccountChangeSubscriptions).forEach((t=>t.subscriptionId=null)),Object.values(this._rootSubscriptions).forEach((t=>t.subscriptionId=null)),Object.values(this._signatureSubscriptions).forEach((t=>t.subscriptionId=null)),Object.values(this._slotSubscriptions).forEach((t=>t.subscriptionId=null)),Object.values(this._slotUpdateSubscriptions).forEach((t=>t.subscriptionId=null))}_updateSubscriptions(){const t=Object.keys(this._accountChangeSubscriptions).map(Number),e=Object.keys(this._programAccountChangeSubscriptions).map(Number),r=Object.keys(this._slotSubscriptions).map(Number),s=Object.keys(this._slotUpdateSubscriptions).map(Number),n=Object.keys(this._signatureSubscriptions).map(Number),i=Object.keys(this._rootSubscriptions).map(Number),o=Object.keys(this._logsSubscriptions).map(Number);if(0!==t.length||0!==e.length||0!==r.length||0!==s.length||0!==n.length||0!==i.length||0!==o.length)if(null!==this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketConnected=!0),this._rpcWebSocketConnected){for(let e of t){const t=this._accountChangeSubscriptions[e];this._subscribe(t,"accountSubscribe",this._buildArgs([t.publicKey],t.commitment,"base64"))}for(let t of e){const e=this._programAccountChangeSubscriptions[t];this._subscribe(e,"programSubscribe",this._buildArgs([e.programId],e.commitment,"base64",{filters:e.filters}))}for(let t of r){const e=this._slotSubscriptions[t];this._subscribe(e,"slotSubscribe",[])}for(let t of s){const e=this._slotUpdateSubscriptions[t];this._subscribe(e,"slotsUpdatesSubscribe",[])}for(let t of n){const e=this._signatureSubscriptions[t],r=[e.signature];e.options&&r.push(e.options),this._subscribe(e,"signatureSubscribe",r)}for(let t of i){const e=this._rootSubscriptions[t];this._subscribe(e,"rootSubscribe",[])}for(let t of o){const e=this._logsSubscriptions[t];let r;r="object"===typeof e.filter?{mentions:[e.filter.toString()]}:e.filter,this._subscribe(e,"logsSubscribe",this._buildArgs([r],e.commitment))}}else this._rpcWebSocket.connect();else this._rpcWebSocketConnected&&(this._rpcWebSocketConnected=!1,this._rpcWebSocketIdleTimeout=setTimeout((()=>{this._rpcWebSocketIdleTimeout=null,this._rpcWebSocket.close()}),500))}_wsOnAccountNotification(t){const e=(0,p.Ue)(t,Lt);for(const r of Object.values(this._accountChangeSubscriptions))if(r.subscriptionId===e.subscription)return void r.callback(e.result.value,e.result.context)}onAccountChange(t,e,r){const s=++this._accountChangeSubscriptionCounter;return this._accountChangeSubscriptions[s]={publicKey:t.toBase58(),callback:e,commitment:r,subscriptionId:null},this._updateSubscriptions(),s}async removeAccountChangeListener(t){if(!this._accountChangeSubscriptions[t])throw new Error(`Unknown account change id: ${t}`);{const e=this._accountChangeSubscriptions[t];delete this._accountChangeSubscriptions[t],await this._unsubscribe(e,"accountUnsubscribe"),this._updateSubscriptions()}}_wsOnProgramAccountNotification(t){const e=(0,p.Ue)(t,$t);for(const r of Object.values(this._programAccountChangeSubscriptions))if(r.subscriptionId===e.subscription){const{value:t,context:s}=e.result;return void r.callback({accountId:t.pubkey,accountInfo:t.account},s)}}onProgramAccountChange(t,e,r,s){const n=++this._programAccountChangeSubscriptionCounter;return this._programAccountChangeSubscriptions[n]={programId:t.toBase58(),callback:e,commitment:r,subscriptionId:null,filters:s},this._updateSubscriptions(),n}async removeProgramAccountChangeListener(t){if(!this._programAccountChangeSubscriptions[t])throw new Error(`Unknown program account change id: ${t}`);{const e=this._programAccountChangeSubscriptions[t];delete this._programAccountChangeSubscriptions[t],await this._unsubscribe(e,"programUnsubscribe"),this._updateSubscriptions()}}onLogs(t,e,r){const s=++this._logsSubscriptionCounter;return this._logsSubscriptions[s]={filter:t,callback:e,commitment:r,subscriptionId:null},this._updateSubscriptions(),s}async removeOnLogsListener(t){if(!this._logsSubscriptions[t])throw new Error(`Unknown logs id: ${t}`);const e=this._logsSubscriptions[t];delete this._logsSubscriptions[t],await this._unsubscribe(e,"logsUnsubscribe"),this._updateSubscriptions()}_wsOnLogsNotification(t){const e=(0,p.Ue)(t,Be),r=Object.keys(this._logsSubscriptions).map(Number);for(let s of r){const t=this._logsSubscriptions[s];if(t.subscriptionId===e.subscription)return void t.callback(e.result.value,e.result.context)}}_wsOnSlotNotification(t){const e=(0,p.Ue)(t,Dt);for(const r of Object.values(this._slotSubscriptions))if(r.subscriptionId===e.subscription)return void r.callback(e.result)}onSlotChange(t){const e=++this._slotSubscriptionCounter;return this._slotSubscriptions[e]={callback:t,subscriptionId:null},this._updateSubscriptions(),e}async removeSlotChangeListener(t){if(!this._slotSubscriptions[t])throw new Error(`Unknown slot change id: ${t}`);{const e=this._slotSubscriptions[t];delete this._slotSubscriptions[t],await this._unsubscribe(e,"slotUnsubscribe"),this._updateSubscriptions()}}_wsOnSlotUpdatesNotification(t){const e=(0,p.Ue)(t,Vt);for(const r of Object.values(this._slotUpdateSubscriptions))if(r.subscriptionId===e.subscription)return void r.callback(e.result)}onSlotUpdate(t){const e=++this._slotUpdateSubscriptionCounter;return this._slotUpdateSubscriptions[e]={callback:t,subscriptionId:null},this._updateSubscriptions(),e}async removeSlotUpdateListener(t){if(!this._slotUpdateSubscriptions[t])throw new Error(`Unknown slot update id: ${t}`);{const e=this._slotUpdateSubscriptions[t];delete this._slotUpdateSubscriptions[t],await this._unsubscribe(e,"slotsUpdatesUnsubscribe"),this._updateSubscriptions()}}_buildArgs(t,e,r,s){const n=e||this._commitment;if(n||r||s){let e={};r&&(e.encoding=r),n&&(e.commitment=n),s&&(e=Object.assign(e,s)),t.push(e)}return t}_buildArgsAtLeastConfirmed(t,e,r,s){const n=e||this._commitment;if(n&&!["confirmed","finalized"].includes(n))throw new Error("Using Connection with default commitment: `"+this._commitment+"`, but method requires at least `confirmed`");return this._buildArgs(t,e,r,s)}_wsOnSignatureNotification(t){const e=(0,p.Ue)(t,Qt);for(const[r,s]of Object.entries(this._signatureSubscriptions))if(s.subscriptionId===e.subscription)return void("receivedSignature"===e.result.value?s.callback({type:"received"},e.result.context):(delete this._signatureSubscriptions[Number(r)],this._updateSubscriptions(),s.callback({type:"status",result:e.result.value},e.result.context)))}onSignature(t,e,r){const s=++this._signatureSubscriptionCounter;return this._signatureSubscriptions[s]={signature:t,callback:(t,r)=>{"status"===t.type&&e(t.result,r)},options:{commitment:r},subscriptionId:null},this._updateSubscriptions(),s}onSignatureWithOptions(t,e,r){const s=++this._signatureSubscriptionCounter;return this._signatureSubscriptions[s]={signature:t,callback:e,options:r,subscriptionId:null},this._updateSubscriptions(),s}async removeSignatureListener(t){if(!this._signatureSubscriptions[t])throw new Error(`Unknown signature result id: ${t}`);{const e=this._signatureSubscriptions[t];delete this._signatureSubscriptions[t],await this._unsubscribe(e,"signatureUnsubscribe"),this._updateSubscriptions()}}_wsOnRootNotification(t){const e=(0,p.Ue)(t,Jt);for(const r of Object.values(this._rootSubscriptions))if(r.subscriptionId===e.subscription)return void r.callback(e.result)}onRootChange(t){const e=++this._rootSubscriptionCounter;return this._rootSubscriptions[e]={callback:t,subscriptionId:null},this._updateSubscriptions(),e}async removeRootChangeListener(t){if(!this._rootSubscriptions[t])throw new Error(`Unknown root change id: ${t}`);{const e=this._rootSubscriptions[t];delete this._rootSubscriptions[t],await this._unsubscribe(e,"rootUnsubscribe"),this._updateSubscriptions()}}}const Ee=new A("StakeConfig11111111111111111111111111111111");class Pe{constructor(t,e,r){(0,s.Z)(this,"unixTimestamp",void 0),(0,s.Z)(this,"epoch",void 0),(0,s.Z)(this,"custodian",void 0),this.unixTimestamp=t,this.epoch=e,this.custodian=r}}(0,s.Z)(Pe,"default",new Pe(0,0,A.default));const We=Object.freeze({Initialize:{index:0,layout:g.struct([g.u32("instruction"),((t="authorized")=>g.struct([P("staker"),P("withdrawer")],t))(),((t="lockup")=>g.struct([g.ns64("unixTimestamp"),g.ns64("epoch"),P("custodian")],t))()])},Authorize:{index:1,layout:g.struct([g.u32("instruction"),P("newAuthorized"),g.u32("stakeAuthorizationType")])},Delegate:{index:2,layout:g.struct([g.u32("instruction")])},Split:{index:3,layout:g.struct([g.u32("instruction"),g.ns64("lamports")])},Withdraw:{index:4,layout:g.struct([g.u32("instruction"),g.ns64("lamports")])},Deactivate:{index:5,layout:g.struct([g.u32("instruction")])},Merge:{index:7,layout:g.struct([g.u32("instruction")])},AuthorizeWithSeed:{index:8,layout:g.struct([g.u32("instruction"),P("newAuthorized"),g.u32("stakeAuthorizationType"),W("authoritySeed"),P("authorityOwner")])}});Object.freeze({Staker:{index:0},Withdrawer:{index:1}});class Ce{constructor(){}static initialize(t){const{stakePubkey:e,authorized:r,lockup:s}=t,n=s||Pe.default,i=$(We.Initialize,{authorized:{staker:S(r.staker.toBuffer()),withdrawer:S(r.withdrawer.toBuffer())},lockup:{unixTimestamp:n.unixTimestamp,epoch:n.epoch,custodian:S(n.custodian.toBuffer())}}),o={keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:K,isSigner:!1,isWritable:!1}],programId:this.programId,data:i};return new O(o)}static createAccountWithSeed(t){const e=new N;e.add(J.createAccountWithSeed({fromPubkey:t.fromPubkey,newAccountPubkey:t.stakePubkey,basePubkey:t.basePubkey,seed:t.seed,lamports:t.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:s,lockup:n}=t;return e.add(this.initialize({stakePubkey:r,authorized:s,lockup:n}))}static createAccount(t){const e=new N;e.add(J.createAccount({fromPubkey:t.fromPubkey,newAccountPubkey:t.stakePubkey,lamports:t.lamports,space:this.space,programId:this.programId}));const{stakePubkey:r,authorized:s,lockup:n}=t;return e.add(this.initialize({stakePubkey:r,authorized:s,lockup:n}))}static delegate(t){const{stakePubkey:e,authorizedPubkey:r,votePubkey:s}=t,n=$(We.Delegate);return(new N).add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!1},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:X,isSigner:!1,isWritable:!1},{pubkey:Ee,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:n})}static authorize(t){const{stakePubkey:e,authorizedPubkey:r,newAuthorizedPubkey:s,stakeAuthorizationType:n,custodianPubkey:i}=t,o=$(We.Authorize,{newAuthorized:S(s.toBuffer()),stakeAuthorizationType:n.index}),a=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}];return i&&a.push({pubkey:i,isSigner:!1,isWritable:!1}),(new N).add({keys:a,programId:this.programId,data:o})}static authorizeWithSeed(t){const{stakePubkey:e,authorityBase:r,authoritySeed:s,authorityOwner:n,newAuthorizedPubkey:i,stakeAuthorizationType:o,custodianPubkey:a}=t,c=$(We.AuthorizeWithSeed,{newAuthorized:S(i.toBuffer()),stakeAuthorizationType:o.index,authoritySeed:s,authorityOwner:S(n.toBuffer())}),u=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1},{pubkey:j,isSigner:!1,isWritable:!1}];return a&&u.push({pubkey:a,isSigner:!1,isWritable:!1}),(new N).add({keys:u,programId:this.programId,data:c})}static split(t){const{stakePubkey:e,authorizedPubkey:r,splitStakePubkey:s,lamports:n}=t,i=new N;i.add(J.createAccount({fromPubkey:r,newAccountPubkey:s,lamports:0,space:this.space,programId:this.programId}));const o=$(We.Split,{lamports:n});return i.add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:o})}static merge(t){const{stakePubkey:e,sourceStakePubKey:r,authorizedPubkey:s}=t,n=$(We.Merge);return(new N).add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:r,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:X,isSigner:!1,isWritable:!1},{pubkey:s,isSigner:!0,isWritable:!1}],programId:this.programId,data:n})}static withdraw(t){const{stakePubkey:e,authorizedPubkey:r,toPubkey:s,lamports:n,custodianPubkey:i}=t,o=$(We.Withdraw,{lamports:n}),a=[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:s,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:X,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}];return i&&a.push({pubkey:i,isSigner:!1,isWritable:!1}),(new N).add({keys:a,programId:this.programId,data:o})}static deactivate(t){const{stakePubkey:e,authorizedPubkey:r}=t,s=$(We.Deactivate);return(new N).add({keys:[{pubkey:e,isSigner:!1,isWritable:!0},{pubkey:j,isSigner:!1,isWritable:!1},{pubkey:r,isSigner:!0,isWritable:!1}],programId:this.programId,data:s})}}(0,s.Z)(Ce,"programId",new A("Stake11111111111111111111111111111111111111")),(0,s.Z)(Ce,"space",200);const{publicKeyCreate:Ze,ecdsaSign:Ue}=k(),Te=g.struct([g.u8("numSignatures"),g.u16("signatureOffset"),g.u8("signatureInstructionIndex"),g.u16("ethAddressOffset"),g.u8("ethAddressInstructionIndex"),g.u16("messageDataOffset"),g.u16("messageDataSize"),g.u8("messageInstructionIndex"),g.blob(20,"ethAddress"),g.blob(64,"signature"),g.u8("recoveryId")]);class ze{constructor(){}static publicKeyToEthAddress(t){T(64===t.length,`Public key must be 64 bytes but received ${t.length} bytes`);try{return o.Buffer.from(w.keccak_256.update(S(t)).digest()).slice(-20)}catch(e){throw new Error(`Error constructing Ethereum address: ${e}`)}}static createInstructionWithPublicKey(t){const{publicKey:e,message:r,signature:s,recoveryId:n,instructionIndex:i}=t;return ze.createInstructionWithEthAddress({ethAddress:ze.publicKeyToEthAddress(e),message:r,signature:s,recoveryId:n,instructionIndex:i})}static createInstructionWithEthAddress(t){const{ethAddress:e,message:r,signature:s,recoveryId:n,instructionIndex:i=0}=t;let a;a="string"===typeof e?e.startsWith("0x")?o.Buffer.from(e.substr(2),"hex"):o.Buffer.from(e,"hex"):e,T(20===a.length,`Address must be 20 bytes but received ${a.length} bytes`);const c=12+a.length,u=c+s.length+1,l=o.Buffer.alloc(Te.span+r.length);return Te.encode({numSignatures:1,signatureOffset:c,signatureInstructionIndex:i,ethAddressOffset:12,ethAddressInstructionIndex:i,messageDataOffset:u,messageDataSize:r.length,messageInstructionIndex:i,signature:S(s),ethAddress:S(a),recoveryId:n},l),l.fill(S(r),Te.span),new O({keys:[],programId:ze.programId,data:l})}static createInstructionWithPrivateKey(t){const{privateKey:e,message:r,instructionIndex:s}=t;T(32===e.length,`Private key must be 32 bytes but received ${e.length} bytes`);try{const t=S(e),n=Ze(t,!1).slice(1),i=o.Buffer.from(w.keccak_256.update(S(r)).digest()),{signature:a,recid:c}=Ue(i,t);return this.createInstructionWithPublicKey({publicKey:n,message:r,signature:a,recoveryId:c,instructionIndex:s})}catch(n){throw new Error(`Error creating instruction; ${n}`)}}}(0,s.Z)(ze,"programId",new A("KeccakSecp256k11111111111111111111111111111"));new A("Va1idator1nfo111111111111111111111111111111"),(0,p.dt)({name:(0,p.Z_)(),website:(0,p.jt)((0,p.Z_)()),details:(0,p.jt)((0,p.Z_)()),keybaseUsername:(0,p.jt)((0,p.Z_)())});new A("Vote111111111111111111111111111111111111111"),g.struct([P("nodePubkey"),P("authorizedVoterPubkey"),P("authorizedWithdrawerPubkey"),g.u8("commission"),g.nu64(),g.seq(g.struct([g.nu64("slot"),g.u32("confirmationCount")]),g.offset(g.u32(),-8),"votes"),g.u8("rootSlotValid"),g.nu64("rootSlot"),g.nu64("epoch"),g.nu64("credits"),g.nu64("lastEpochCredits"),g.nu64(),g.seq(g.struct([g.nu64("epoch"),g.nu64("credits"),g.nu64("prevCredits")]),g.offset(g.u32(),-8),"epochCredits")]);const qe={http:{devnet:"http://api.devnet.solana.com",testnet:"http://api.testnet.solana.com","mainnet-beta":"http://api.mainnet-beta.solana.com"},https:{devnet:"https://api.devnet.solana.com",testnet:"https://api.testnet.solana.com","mainnet-beta":"https://api.mainnet-beta.solana.com"}};function Oe(t,e){const r=!1===e?"http":"https";if(!t)return qe[r].devnet;const s=qe[r][t];if(!s)throw new Error(`Unknown ${r} cluster: ${t}`);return s}}}]);